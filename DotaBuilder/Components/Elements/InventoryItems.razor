@using DotaBuilder.Components.Data.Classes
@using DotaBuilder.Components.Data
@using DataLibrary
@inject ItemClass ItemClass
@inject ItemHandler ItemHandler
@inject IDataAccess _data
@inject IConfiguration _config
@implements IDisposable

@rendermode InteractiveServer

<h3>InventoryItems</h3>

@if (itemList != null)
{
    <body>
        <DropTarget T="ItemClass" Drop="@OnDrop">
            <table class="item-table"  @onkeypress="@(e => KeyPress(e))">
                @for (int rows = 0; rows < GlobalVariables.InventoryRowsCount; rows++)
                {
                    <tr class="@(rows == GlobalVariables.InventoryRowsCount - 1 ? "tr1" : "tr2")">
                        @for (int columns = 0; columns < GlobalVariables.InventoryColumnsCount; columns++)
                        {
                            int tmpX = rows;
                            int tmpY = columns;
                            <td class="td1" @ondragover="@(e => OnHoverCell(tmpX,tmpY))" @onmouseout="OnMouseOver">
                                <Item itemClass="@itemList[rows, columns]"
                                      OnClickEvent="OnClick"
                                      OnHoverEvent="OnHover" />
                            </td>

                        }
                    </tr>
                }
            </table>
        </DropTarget>
    </body>
}
<style>
    .item-table {
        border-collapse: collapse;
        font-size: 0.9em;
        font-family: sans-serif;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
    }

        .item-table .tr1 {
            height: 44px;
            width: 60px;
        }

        .item-table .tr2 {
            height: 44px * 0,9px;
            width: 60px * 0,9px;
        }

    .td1 {
        height: 44px;
        width: 60px;
    }
</style>

@code {

    private int targetRow = 0, targetColumn = 0;

    [Parameter]
    public GlobalVariables GlobalVariables { get; set; }

    private ItemClass[,] itemList = new ItemClass[
        GlobalVariables.InventoryRowsCount,
        GlobalVariables.InventoryColumnsCount];

    private ItemClass emptyItem;

    private ItemCombiner itemCombiner;

    private bool ableToDrop = false;

    protected override void OnInitialized()
    {
        emptyItem = GlobalVariables.GetEmptyItemClass();
        itemCombiner = new ItemCombiner(_data, _config, GlobalVariables);
        itemCombiner.Initialize();
        FillInventoryWithEmptyItems();
        ItemHandler.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        ItemHandler.OnStateChange -= StateHasChanged;
    }

    private void FillInventoryWithEmptyItems()
    {
        for (int rows = 0; rows < GlobalVariables.InventoryRowsCount; rows++)
        {
            for (int columns = 0; columns < GlobalVariables.InventoryColumnsCount; columns++)
            {
                itemList[rows, columns] = emptyItem;
            }
        }
    }

    private void OnDrop(ItemClass item)
    {
        Console.WriteLine("[DROP][InventoryItems] Drop {0} in X:{1} Y:{2}", item.ItemName, targetRow, targetColumn);
        AddItem(targetRow, targetColumn, item);
        StateHasChanged();
    }

    public void OnHoverCell(int rows, int columns)
    {
        targetRow = rows;
        targetColumn = columns;
        Console.WriteLine("[DROP][InventoryItems] Dropping to X:{0} Y:{1}", rows, columns);
    }

    public void OnClick(EventCallbackItemArgs args)
    {
        if (args != null)
        {
            Console.WriteLine("[Click][InventoryItems] Button ID: {0}", args.Name == null ? "Empty" : args.Name);
        }
        else
        {
            Console.WriteLine("[Click][InventoryItems] nie zainicjalizowany EventCallbackItemArgs");
        }
    }

    public void OnHover(EventCallbackItemArgs args)
    {
        if (args != null)
        {
            Console.WriteLine("[Hover][InventoryItems] Button ID: {0}", args.Name);
        }
    }

    private void KeyPress(KeyboardEventArgs e)
    {
        if (e.Code == "Space")
        {
            Console.WriteLine("[DROP][Deleting][InventoryItems] Deleting X:{0} Y:{1}", targetRow, targetColumn);
            DeleteItem(targetRow, targetColumn);
        }
    }

    private void OnMouseOver()
    {
        targetColumn = 0;
        targetRow = 0;
    }

    private async void DeleteItem(int row, int column)
    {
        itemList[row, column] = emptyItem;
        await InvokeAsync(() =>
        {
            ItemHandler.UpdateItemsInInventory(itemList);
        });
    }

    private async void AddItem(int row, int column, ItemClass item)
    {
        itemList[row, column] = item;
        await InvokeAsync(() =>
        {
            ItemHandler.UpdateItemsInInventory(itemList);
        });

        itemCombiner.CheckForCombinations(itemList);
    }

}
